---
params:
  gemeentecode: 2 
  regiocode: 23
  regionaam: 'GGD Limburg-Noord'
  path_nepdata: "../nep testdata GMJV - Regionaal trendbestand 2022-2024.sav"
  path_hulpfuncties: "../hulpfuncties.R"
  path_cbs_data: "../voorbeeld_JongVolWassenenNaarGeslachtEnLeeftijd1Jan2024.xlsx"
  default_nvar: 100
  default_ncel: 10
  default_kleuren_grafiek: !expr c("#012C17","#76B82A","#007E48")
  default_kleuren_responstabel: !expr c("header" = "#012C17", "kleur_1" = "#007E48", "kleur_2" = "#76B82A","kleur_tekst" = "#FFFFFF")
---

# Tekstfuncties

```{r Instellingen, echo=F, message=F, warning=F}
#Libraries inladen
# Het script maakt gebruik van een aantal packages
# Deze moeten bij de eerste keer lokaal worden geinstalleerd
# Hieronder worden de benodige packages geladen
library(gt)
library(dplyr)
library(ggplot2)
library(tidyr)
library(haven)
library(stringr) # Voor str_replace & str_wrap
library(labelled) # Package om te werken met datalabels, o.a. voor to_character()
library(survey) # Package om te werken met gewogen gemiddelds incl. betrouwbaarheidsintervallen
library(glue) #om strings aangenaam aan elkaar te plakken
library(plotly)
library(forcats)
library(openxlsx) #om cbs populatiebestand te kunnen lezen
library(showtext) #om andere lettertypen te kunnen gebruiken
 
options(dplyr.summarise.inform = FALSE)
source(params$path_hulpfuncties)

#SPSS data inlezen
## OPTIE 1: Nepdata
#Lees SPSS bestand & converteer 'user-missing' naar missing in R (NA)
monitor_df = haven::read_spss(params$path_nepdata, user_na =T) %>%
  rename(Standaardisatiefactor_regio = Standaardisatiefactor,
         Stratum_regio = Stratum) %>%
  mutate(Standaardisatiefactor_gemeente = Standaardisatiefactor_regio,
         Stratum_gemeente = Stratum_regio) %>%
  labelled::user_na_to_na()

# Label toevoegen aan ongelabelde jaarindicator
#TODO verwijderen wanneer dit in syntaxen gedaan is
val_label(monitor_df$AGOJB401, 2024) <- '2024'
val_label(monitor_df$AGOJB401, 2022) <- '2022'


#Maak survey designs
# Het landelijk en regionaal design hebben dezelfde weegfactoren. Daarom maken we een landelijk design obv landelijke dataset en een regionaal design obv een subset van het landelijk design.
# Landelijk 2022 en 2024
design_land <- survey_design_maken(
                         strata = 'Stratum_regio', 
                         gewichten = 'Standaardisatiefactor_regio',
                         data = monitor_df)

#design regio is een subset van design land met ggdregio overgehouden.
# Regionaal 2022 en 2024
design_regio <- subset(design_land, GGDregio == params$regiocode)


#Het gemeentelijk design heeft andere weegfactoren. De gehele dataset waar het gem. design over geld is de GGDregio. Daarom maken we eerst een regionaal design o.b.v. de hele ggdregio en subsetten we daarna het gemeentedesign.
design_gem_regio <- survey_design_maken(
                          strata = 'Stratum_gemeente', #hier komen andere parameters
                          gewichten = 'Standaardisatiefactor_gemeente',  #hier ook
                          data = monitor_df %>% 
                            filter(!is.na(Standaardisatiefactor_gemeente)) # alleen deelnemers met Standaardisatiefactor_gemeente
                          )

# Gemeentelijk 2022 en 2024
design_gem <- subset(design_gem_regio, Gemeentecode == params$gemeentecode)

rm(design_gem_regio) #temp regiodesign voor gemdesign verwijderen niet meer nodig

#Er is niet goed aangegeven wat missing is in SPSS.
#tijdelijke functie om 9 Onbekend te verwijderen & naar NA te zetten

for(var in names(monitor_df)){
  
  monitor_df <- monitor_df %>% verwijder_9_onbekend(var)

}

#Lettertypen/Fonts ophalen met showtext 
font_add_google("Open Sans")
#showtext_auto om te zorgen dat juist graphicsdevice wordt gebruikt
showtext_auto()

```

Hieronder volgen een aantal functies die gebruikt kunnen worden in een tekst.

## Maak percentage

De functie **maak_percentage()** berekent een percentage van een indicator. De functie geeft als output het percentage (getal) met een %-teken als character, bijvoorbeeld 88%.

### Nodige argumenten:

-   **var_inhoud:**\
    Een character vector met de naam van de indicator waarvan je het percentage wil berekenen.

### Optionele argumenten:

-   **value:**\
    Een getal dat aangeeft welk value van de de variabele vergeleken wordt. Default is 1.
    
-   **niveau:**\
    Het gebiedsniveau waarop je het percentage wil berekenen. Kan "regio", "gemeente" of "nl" zijn. Default is "regio".
    
-   **huidig_jaar:**\
    Het jaar waarover je het percentage wil berekenen. Default is 2024.

-   **var_jaar:**\
    De indicator die aangeeft uit welk jaar de deelnemer is. Default is "AGOJB401".
    
-   **ongewogen**\
    Standaard op FALSE. Wanneer TRUE worden ongewogen percentages uitgerekend.

    
### Standaard percentage

```{r Maak percentage 1, warning = F}
# Standaard percentage:
monitor_df %>%
  maak_percentage(var_inhoud = 'GZGGA402')
```

### Bereken standaard percentage en toon in bol grafiek

```{r Maak percentage 2, warning = F}
# Percentage in bol grafiek
monitor_df %>%
  maak_percentage(var_inhoud = 'LVPKS403') %>% # bereken percentage
  bol_met_cijfer() # toon in bol grafiek
```

## Maak tekstuele vergelijking

De functie **maak_vergelijking()** maakt een vergelijking tussen de categorieën van een uitsplitsing voor een bepaalde indicator. Bijvoorbeeld een vergelijking tussen het percentage mannen en vrouwen dat zich gelukkig voelt. Hiervoor berekent de functie het percentage en de confidence intervallen van een indicator en bepaalt vervolgens of er overlap zit tussen deze confidence intervallen. De functie geeft als output een zin waarin aangegeven of de uitsplitsingen al dan niet vergelijkbaar zijn.

### Nodige argumenten:

-   **var_inhoud:**\
    Een character vector met de naam van de indicator waarvan je de percentages wil vergelijken.
    
-   **var_crossing:**\
    Een character vector met de naam van de indicator waarover je wil uitsplitsen. De indicator moet minimaal 2 categorieën en maximaal 3 categorieën bevatten. var_crossing kan leeg gelaten worden indien je meerdere niveaus aangeeft. Dan zal niveau gebruikt worden als crossing.

### Optionele argumenten:

-   **variabele_label:**\
    Een character variabele met een alternatief label voor de variabele. Default is NULL (automatisch label o.b.v. label van variabele in data).

-   **value**:\
    Een getal dat aangeeft welk value van de de variabele vergeleken wordt. Default is 1.

-   **niveau:**\
    Het gebiedsniveau waarop je het percentage wil berekenen. Kan "regio", "gemeente" of "nl" zijn. Default is "regio". Je kan ook meerdere niveaus invoeren, dan wordt niveau gebruikt als crossing. In dit geval moet je var_crossing leeg laten.
    
-   **huidig_jaar:**\
    Het jaar waarover je het percentage wil berekenen. Default is 2024.

-   **var_jaar:**\
    De indicator die aangeeft uit welk jaar de deelnemer is. Default is "AGOJB401".

### Standaard vergelijking tussen mannen en vrouwen

```{r Maak vergelijking 1, warning = F}
# Bij een vergelijking tussen gender of tussen leeftijdscategorieën worden de labels aangepast. 
# Bij gebruik van andere indicatoren worden de labels uit de data gebruikt

# Standaard vergelijking tussen mannen en vrouwen:
monitor_df %>% maak_vergelijking(var_inhoud = 'GZGGA402', 
                                 variabele_label = "hun eigen gezondheid als (zeer) goed ervaart",
                                 var_crossing = 'AGGSA402')
```

### Vergelijking tussen 3 groepen

```{r Maak vergelijking 2, warning = F}
# Bij gebruik van andere indicatoren dan gender en leeftijdscategorieën worden de labels uit de data gebruikt.

# Vergelijking tussen migratieachtergrond in 3 categorieën:
monitor_df %>% maak_vergelijking(var_inhoud = 'GZGGA402', 
                                 variabele_label = "hun eigen gezondheid als (zeer) goed ervaart",
                                 var_crossing = 'LVTEA401')

```

## Maak top

De functie **maak_top()** sorteert indicatoren van hoogst naar laagst percentage. De functie geeft als output een zin met het label van de indicator en het bijbehorende percentage.

### Nodige argumenten:

-   **var_inhoud:**\
    Een character vector met de na(a)m(en) van de indicator(en) waarvan je de percentages van hoog naar laag wil sorteren.

### Optionele argumenten:

-   **top:**\
    Een getal dat aangeeft welke percentages van de top je als output wil. Dit kan een getal zijn (bv. 3, dan is de output het op 2-na-hoogste percentage) of een reeks van getallen (bv. 1:5, dan is de output de top 5 van hoogste percentages). Default is 1.

-   **toon_label:**\
    Boolean (TRUE of FALSE) die aangeeft of het label van het percentage bij de output gegeven moet worden. TRUE geeft aan dat het label bij de output komt. Default is TRUE.

-   **value:**\
    Een getal dat aangeeft welk value van de de variabele vergeleken wordt. Default is 1.
    
-   **niveau:**\
    Het gebiedsniveau waarop je het percentage wil berekenen. Kan "regio", "gemeente" of "nl" zijn. Default is "regio". Je kan ook meerdere niveaus invoeren, dan wordt niveau gebruikt als crossing. In dit geval moet je var_crossing leeg laten.
    
-   **huidig_jaar:**\
    Het jaar waarover je het percentage wil berekenen. Default is 2024.

-   **var_jaar:**\
    De indicator die aangeeft uit welk jaar de deelnemer is. Default is "AGOJB401".

### Bereken hoogste percentage

```{r Maak top 1, warning = F}
# Top 1 zonder label
monitor_df %>% maak_top(var_inhoud = c("LVVTA404", "LVVTA405", "LVVTA406", "LVVTA407", "LVVTA408", "LVVTA409", "LVVTA410"),
                        toon_label = FALSE, # Wijzig FALSE naar TRUE om label te tonen.
                        top = 1)
```

### Bereken top 3 van meerdere indicatoren

```{r Maak top 2, warning = F}
# Top 3
monitor_df %>% maak_top(var_inhoud = c("LVVTA404", "LVVTA405", "LVVTA406", "LVVTA407", "LVVTA408", "LVVTA409", "LVVTA410"),
                        top = 1:3)
```

### Bereken top 3 binnen indicator

```{r Maak top 3, warning = F}
# Top 3 
monitor_df %>% maak_top(var_inhoud = 'AGLFA401',
                        value = 1:3, # Vul hier alle values in die voorkomen bij indicator
                        top = 1:3)
```
