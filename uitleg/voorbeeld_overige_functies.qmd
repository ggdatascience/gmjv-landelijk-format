---
params:
  gemeentecode: 2 
  regiocode: 23
  regionaam: 'GGD Limburg-Noord'
  path_nepdata: "../nep testdata GMJV - Regionaal trendbestand 2022-2024.sav"
  path_hulpfuncties: "../hulpfuncties.R"
  path_cbs_data: "../voorbeeld_JongVolWassenenNaarGeslachtEnLeeftijd1Jan2024.xlsx"
  default_nvar: 100
  default_ncel: 10
  default_kleuren_grafiek: !expr c("#012C17","#76B82A","#007E48")
  default_kleuren_responstabel: !expr c("header" = "#012C17", "kleur_1" = "#007E48", "kleur_2" = "#76B82A","kleur_tekst" = "#FFFFFF")
---

# Overige functies

```{r Instellingen, echo=F, message=F, warning=F}
#Libraries inladen
# Het script maakt gebruik van een aantal packages
# Deze moeten bij de eerste keer lokaal worden geinstalleerd
# Hieronder worden de benodige packages geladen
library(gt)
library(dplyr)
library(ggplot2)
library(tidyr)
library(haven)
library(stringr) # Voor str_replace & str_wrap
library(labelled) # Package om te werken met datalabels, o.a. voor to_character()
library(survey) # Package om te werken met gewogen gemiddelds incl. betrouwbaarheidsintervallen
library(glue) #om strings aangenaam aan elkaar te plakken
library(plotly)
library(forcats)
library(openxlsx) #om cbs populatiebestand te kunnen lezen
library(showtext) #om andere lettertypen te kunnen gebruiken
 
options(dplyr.summarise.inform = FALSE)
source(params$path_hulpfuncties)

#SPSS data inlezen
## OPTIE 1: Nepdata
#Lees SPSS bestand & converteer 'user-missing' naar missing in R (NA)
monitor_df = haven::read_spss(params$path_nepdata, user_na =T) %>%
  rename(Standaardisatiefactor_regio = Standaardisatiefactor,
         Stratum_regio = Stratum) %>%
  mutate(Standaardisatiefactor_gemeente = Standaardisatiefactor_regio,
         Stratum_gemeente = Stratum_regio) %>%
  labelled::user_na_to_na()

# Label toevoegen aan ongelabelde jaarindicator
#TODO verwijderen wanneer dit in syntaxen gedaan is
val_label(monitor_df$AGOJB401, 2024) <- '2024'
val_label(monitor_df$AGOJB401, 2022) <- '2022'


#Maak survey designs
# Het landelijk en regionaal design hebben dezelfde weegfactoren. Daarom maken we een landelijk design obv landelijke dataset en een regionaal design obv een subset van het landelijk design.
# Landelijk 2022 en 2024
design_land <- survey_design_maken(
                         strata = 'Stratum_regio', 
                         gewichten = 'Standaardisatiefactor_regio',
                         data = monitor_df)

#design regio is een subset van design land met ggdregio overgehouden.
# Regionaal 2022 en 2024
design_regio <- subset(design_land, GGDregio == params$regiocode)


#Het gemeentelijk design heeft andere weegfactoren. De gehele dataset waar het gem. design over geld is de GGDregio. Daarom maken we eerst een regionaal design o.b.v. de hele ggdregio en subsetten we daarna het gemeentedesign.
design_gem_regio <- survey_design_maken(
                          strata = 'Stratum_gemeente', #hier komen andere parameters
                          gewichten = 'Standaardisatiefactor_gemeente',  #hier ook
                          data = monitor_df %>% 
                            filter(!is.na(Standaardisatiefactor_gemeente)) # alleen deelnemers met Standaardisatiefactor_gemeente
                          )

# Gemeentelijk 2022 en 2024
design_gem <- subset(design_gem_regio, Gemeentecode == params$gemeentecode)

rm(design_gem_regio) #temp regiodesign voor gemdesign verwijderen niet meer nodig

#Er is niet goed aangegeven wat missing is in SPSS.
#tijdelijke functie om 9 Onbekend te verwijderen & naar NA te zetten

for(var in names(monitor_df)){
  
  monitor_df <- monitor_df %>% verwijder_9_onbekend(var)

}

#Lettertypen/Fonts ophalen met showtext 
font_add_google("Open Sans")
#showtext_auto om te zorgen dat juist graphicsdevice wordt gebruikt
showtext_auto()

```

In dit document worden de Responstabel functie en Bol met cijfer uitgelegd en hoe hier aanpassingen in gedaan kunnen worden.

# Responstabel

De functie **maak_responstabel()** maakt een responstabel met het totaal aantal respondenten & deze respondenten uitgesplitst naar kruisvariabelen. Missing waarden op die kruisvariabelen worden standaard weergeven als 'Onbekend'

## Nodige argumenten:

-   **crossings:**\
    Een character vector met kruisvariabelen waarover je N ingevulde vragenlijsten over wilt opsplitsen. Kan 1 of meer zijn.

## Optionele argumenten:

-   **missing_label:**\
    Een character variabele met een alternatief label voor missing waarden (standaard 'Onbekend').

-   **kleuren:\
    **Een named character vector met alternatieve kleuren voor de tabel. Vector moet 4 elementen hebben met namen: 'header', 'kleur_1', 'kleur_2' en 'tekst'.

### Standaard responstabel met twee crossings

```{r}
#Standaard responstabel met twee crossings:
monitor_df %>% maak_responstabel(
  crossings = c("AGGSA402","AGLFA401"))
```

### Aangepaste responstabel met drie crossings

```{r}
#Responstabel met drie crossings, aangepast missing_label en aangepaste kleuren.
monitor_df %>% maak_responstabel( 
  crossings = c("AGGSA402","AGLFA401","AGOWS404"),
  missing_label = "Niet ingevuld",
  kleuren = c(header =  "#FEC805",
              kleur_1 = "#1A2C54",
              kleur_2 = "#009BD9",
              kleur_tekst = "#FFFFFF"
              )
  )
```

# Bol met cijfer

Hieronder volgt uitleg voor de Bol met cijfers-functie. De functie **bol_met_cijfer()** maakt een cirkel met een cijfer daarin, een tekst onder de bol die het niveau aangeeft en daaronder een tekst die de indicator aangeeft. De functie genereert automatisch alt-text.

## Nodige argumenten:

-   **getal:**\
    Een vector met 1 of 2 getal(len) of percentage(s) (bv. 1 of 1%).

## Optionele argumenten:

-   **omschrijving:**\
    Een character variabele met een tekst die onder de bol(len) komt te staan, bijvoorbeeld een omschrijving van de indicator.

-   **omschrijving2:**\
    Een character variabele met een tekst die onder de bol(len) komt te staan, bijvoorbeeld een omschrijving van de indicator. Dit is het vervolg van *omschrijving* wanneer deze niet op één regel past.

-   **niveau:**\
    Een character variabele met een tekst die onder de bol komt te staan, bijvoorbeeld het gebiedsniveau van de indicator (zoals Gemeente of Nederland).

-   **kleur:**\
    Een kleur die gebruikt wordt voor de bol en de tekst onder de bol (*niveau*).

-   **kleur_outline:**\
    Een kleur die gebruikt wordt voor de omtrek van de bol. Default is wit.

-   **kleur_getal:**\
    Een kleur die gebruikt wordt voor het *getal* in de bol. Default is wit.

-   **kleur_omschrijving:**\
    Een kleur die gebruikt wordt voor de *omschrijving* (en eventueel *omschrijving2*) naast de bol. Default is #305A5B.

### Standaard bol met cijfer

```{r}

bol_met_cijfer(getal = "4%", 
               omschrijving = "die aan indicator voldoen.", 
               niveau = "Gemeente")

```

### Standaard bol met twee cijfers

```{r}

bol_met_cijfer(getal = c("4%", "10%"), 
                         omschrijving = "die aan indicator voldoen.", 
                         niveau = c("Gemeente", "Regio"))

```

### Bol met cijfer zonder omschrijving en niveau

```{r}
# De functie maak_percentage() kan gebruikt worden als input voor bol_met_cijfer
monitor_df %>%
  maak_percentage(var_inhoud = 'LVPKS403') %>% # bereken percentage
  bol_met_cijfer() # toon in bol grafiek
```

### Bol met aangepaste kleuren

```{r}
# De functie maak_percentage() kan gebruikt worden als input voor bol_met_cijfer
monitor_df %>%
  maak_percentage(var_inhoud = 'LVPKS403') %>% # bereken percentage
  bol_met_cijfer(omschrijving = "kan werken met R.", niveau = "Onderzoekers",
                 kleur = "#FEC805", kleur_getal = "#009BD9", kleur_omschrijving = "#1A2C54") # toon in bol grafiek
```
