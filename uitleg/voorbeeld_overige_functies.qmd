---
title: ""
author: ""
format:
  html:
    page-layout: full
    css: custom.css
    toc: TRUE
    embed-resources: true
params:
  gemeentecode: 2 
  regiocode: 23
  regionaam: 'GGD Limburg-Noord'
  path_monitor_data: "../nep testdata GMJV - Regionaal trendbestand 2022-2024.sav"
  path_hulpfuncties: "../hulpfuncties.R"
  path_cbs_data: "../JongVolWassenenNaarGeslachtEnLeeftijd1Jan2024.xlsx"
  default_nvar: 100
  default_ncel: 10
  default_kleuren_grafiek: !expr c("#012C17","#76B82A","#007E48")
  default_kleuren_responstabel: !expr c("header" = "#012C17", "kleur_1" = "#007E48", "kleur_2" = "#76B82A","kleur_tekst" = "#FFFFFF")
format-links: false
---
# Algemeen
```{r Instellingen, echo=F, message=F, warning=F}

# Deze moeten bij de eerste keer lokaal worden geinstalleerd
# Hieronder worden de benodige packages geladen
library(gt)
library(dplyr)
library(ggplot2)
library(tidyr)
library(haven)
library(stringr) # Voor str_replace
library(labelled) # Package om te werken met datalabels, o.a. voor to_character()
library(survey) # Package om te werken met gewogen gemiddelds incl. betrouwbaarheidsintervallen
library(glue) #om strings aangenaam aan elkaar te plakken
library(plotly)

options(dplyr.summarise.inform = FALSE)
source("hulpfuncties.R")

#TODO instelbare variabelen overzichtelijk maken

#Standaardwaarden in te stellen door gebruiker:
# Standaard kleuren
default_kleuren_grafiek <- c("#012C17","#76B82A","#007E48")
default_kleuren_responstabel <- c("header" = "#012C17",
                                  "kleur_1" = "#007E48",
                                  "kleur_2" = "#76B82A",
                                  "kleur_tekst" = "#FFFFFF"
                                  )

# Standaard minima voor groep & cel
default_Nvar = 100 # Minimum aantal invullers per vraag.
default_Ncel = 10 # Minimum aantal invullers oper antwoordoptie.


#SPSS data inlezen
# Regionaal bestand
#file_path_regio = "nep testdata GMJV - Regionaal trendbestand 2022-2024.sav"

# Landelijk bestand
file_path = "nep testdata GMJV - Regionaal trendbestand 2022-2024.sav"

#Lees SPSS bestand & converteer 'user-missing' naar missing in R (NA)
monitor_df = haven::read_spss(file_path, user_na =T) %>%
  labelled::user_na_to_na()

#TODO verwijderen bij echte data. tijdelijk varlabel voor jaarvariabele
var_label(monitor_df$AGOJB401) <- "Jaar"

#Maak survey designs

#TODO bij echte data standaardisatiefactor en stratum aanpassen per niveau

# Het landelijk en regionaal design hebben dezelfde weegfactoren. Daarom maken we een landelijk design obv landelijke dataset en een regionaal design obv een subset van het landelijk design.
# Landelijk 2022 en 2024
design_land <- survey_design_maken(
                         strata = 'Stratum',
                         gewichten = 'Standaardisatiefactor',
                         data = monitor_df)


#design regio is een subset van design land met ggdregio overgehouden.
# Regionaal 2022 en 2024
design_regio <- subset(design_land, GGDregio == params$regiocode)


#Het gemeentelijk design heeft andere weegfactoren. De gehele dataset waar het gem. design over geld is de GGDregio. Daarom maken we eerst een regionaal design o.b.v. de hele ggdregio en subsetten we daarna het gemeentedesign.
design_gem_regio <- survey_design_maken(
                          strata = 'Stratum', #hier komen andere parameters
                          gewichten = 'Standaardisatiefactor',  #hier ook
                          data = monitor_df %>% 

                            filter(GGDregio == params$regiocode))

# Gemeentelijk 2022 en 2024
design_gem <- subset(design_gem_regio, Gemeentecode == params$gemeentecode)

rm(design_gem_regio) #temp regiodesign voor gemdesign verwijderen niet meer nodig

#Er is niet goed aangegeven wat missing is in SPSS.
#tijdelijke functie om 9 Onbekend te verwijderen & naar NA te zetten

for(var in names(monitor_df)){
  
  monitor_df <- monitor_df %>% verwijder_9_onbekend(var)

}

# ALTERNATIEVE METHODE VAN INLADEN: regionale data invoegen in landelijk
# Landelijk bestand inladen
# df <- haven::read_spss(file.choose(), user_na =T) %>%
#   labelled::user_na_to_na()
# 
# # Regionaal bestand inladen
# df_regio <- haven::read_spss(file.choose(), user_na =T) %>%
#   labelled::user_na_to_na()
# 
# # Check of aantallen gelijk zijn.
# # NB. Alleen deelnemers met landelijke weegfactor zitten in landelijk bestand.
# if (sum(df_regio$Standaardisatiefactor != 0) != nrow(df %>% filter(GGDregio == regiocode))) {
#   print("Aantal deelnemers in regio is niet hetzelfde in beide bestanden, check data.")
# }
# 
#
# TODO zorgen dat hier ook nog op jaar gefilterd wordt!
# # Filter regio uit landelijk databestand
# df <- df %>%
#   filter(GGDregio != regiocode)
# 
# # Voeg regiobestand toe aan landelijk bestand
# df <- df %>%
#   full_join(df_regio)
# 
# # Opschonen
# rm(df_regio)
# 
# #Er is niet goed aangegeven wat missing is in SPSS.
# #tijdelijke functie om 9 Onbekend te verwijderen & naar NA te zetten
# 
# for(var in names(df)){
#   
#   df <- df %>% verwijder_9_onbekend(var)
# 
# }
# 
# # Regionale data filteren
# df %>%
#   filter(GGDregio == params$regiocode)
# 
# # Gemeentelijke data filteren
# df %>%
#   filter(Gemeentecode == params$gemeentecode)

```



In dit document worden de Responstabel functie en Bol met cijfer uitgelegd en hoe hier aanpassingen in gedaan kunnen worden.\

::: callout-tip
In dit document wordt gebruikt gemaakt van de 'pipe-operator' *%\>%*.

De pipe-operator stuurt een resultaat door naar de volgende functie. Op deze manier kunnen meerdere bewerkingen in R overzichtelijk aan elkaar gekoppeld worden. Lees [hier](#0) een uitleg van de magrittr pipe (en de voordelen).

Zonder de pipe-operator zou het aanroepen van maak_responstabel er zo uit zien:

``` r
maak_responstabel(df = monitor_df, crossings = "gender_2cat", ...)
```

Met pipe-operator ziet dit er zo uit:

``` r
monitor_df %>% maak_responstabel(crossings = "gender_2cat", ...)
```
:::

# Responstabel

De functie **maak_responstabel()** maakt een responstabel met het totaal aantal respondenten & deze respondenten uitgesplitst naar kruisvariabelen. Missing waarden op die kruisvariabelen worden standaard weergeven als 'Onbekend'

## Nodige argumenten:

-   **crossings:**\
    Een character vector met kruisvariabelen waarover je N ingevulde vragenlijsten over wilt opsplitsen. Kan 1 of meer zijn.

## Optionele argumenten:

-   **missing_label:**\
    Een character variabele met een alternatief label voor missing waarden (standaard 'Onbekend').

-   **kleuren:\
    **Een named character vector met alternatieve kleuren voor de tabel. Vector moet 4 elementen hebben met namen: 'header', 'kleur_1', 'kleur_2' en 'tekst'.

### Standaard responstabel met twee crossings

```{r}
#Standaard responstabel met twee crossings:
monitor_df %>% maak_responstabel(
  crossings = c("AGGSA402","AGLFA401"))
```

### Aangepaste responstabel met drie crossings

```{r}
#Responstabel met drie crossings, aangepast missing_label en aangepaste kleuren.
monitor_df %>% maak_responstabel( 
  crossings = c("AGGSA402","AGLFA401","AGOWS404"),
  missing_label = "Niet ingevuld",
  kleuren = c(header =  "#FEC805",
              kleur_1 = "#1A2C54",
              kleur_2 = "#009BD9",
              kleur_tekst = "#FFFFFF"
              )
  )
```

# Bol met cijfer

Hieronder volgt uitleg voor de Bol met cijfers-functie. De functie **bol_met_cijfer()** maakt een cirkel met een cijfer daarin, een tekst onder de bol die het niveau aangeeft en een tekst naast de bol die de indicator aangeeft. De functie genereert automatisch alt-text.

## Nodige argumenten:

-   **getal:**\
    Een vector met 1 getal of 1 percentage (bv. 1 of 1%).

## Optionele argumenten:

-   **omschrijving:**\
    Een character variabele met een tekst die naast de bol komt te staan, bijvoorbeeld een omschrijving van de indicator.

-   **omschrijving2:**\
    Een character variabele met een tekst die naast de bol komt te staan, bijvoorbeeld een omschrijving van de indicator. Dit is het vervolg van *omschrijving* wanneer deze niet op één regel past.

-   **niveau:**\
    Een character variabele met een tekst die onder de bol komt te staan, bijvoorbeeld het gebiedsniveau van de indicator (zoals Gemeente of Nederland).

-   **kleur:**\
    Een kleur die gebruikt wordt voor de bol en de tekst onder de bol (*niveau*).

-   **kleur_outline:**\
    Een kleur die gebruikt wordt voor de omtrek van de bol. Default is wit.

-   **kleur_getal:**\
    Een kleur die gebruikt wordt voor het *getal* in de bol. Default is wit.

-   **kleur_omschrijving:**\
    Een kleur die gebruikt wordt voor de *omschrijving* (en eventueel *omschrijving2*) naast de bol. Default is zwart.

### Standaard bol met cijfer

```{r}

bol_met_cijfer(getal = "4%", omschrijving = "die aan indicator voldoen.", niveau = "Gemeente")

```

### Bol met cijfer zonder omschrijving en niveau

```{r}
# De functie maak_percentage() kan gebruikt worden als input voor bol_met_cijfer
monitor_df %>%
  maak_percentage(var_inhoud = 'LVPKS403') %>% # bereken percentage
  bol_met_cijfer() # toon in bol grafiek
```

### Bol met aangepaste kleuren

```{r}
# De functie maak_percentage() kan gebruikt worden als input voor bol_met_cijfer
monitor_df %>%
  maak_percentage(var_inhoud = 'LVPKS403') %>% # bereken percentage
  bol_met_cijfer(omschrijving = "kan werken met R.", niveau = "Onderzoekers",
                 kleur = "#FEC805", kleur_getal = "#009BD9", kleur_omschrijving = "#1A2C54") # toon in bol grafiek
```
